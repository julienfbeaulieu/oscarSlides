y
coef(s)
coef(s)[2]+coef(s)[3]
outlierTest(fit3)
library(car)
outlierTest(fit3)
?outlierTest
outlierTest(fit3)
fit5 <- lm(mpg ~ am + wt + qsec, data = mtcars2)
cbind(coef(fit5),confint(fit5,level=0.95))
outliers <- c("Chrysler Imperial")
mtcars2 <- mtcars[!is.element(rownames(mtcars),outliers),]
fit5 <- lm(mpg ~ am + wt + qsec, data = mtcars2)
cbind(coef(fit5),confint(fit5,level=0.95))
?mtcars
?av.Plots
dfbetas(fit3)
library(car)
library(MASS)
library(dplyr)
data(mtcars)
head(mtcars)
fit.all <- lm(mpg ~ ., data = mtcars)
summary(fit.all)
fit1 <- lm(mpg ~  am, data = mtcars)
fit2 <- lm(mpg ~ am + wt, data = mtcars)
fit3 <- lm(mpg ~ am + wt + qsec, data = mtcars)
fit4 <- lm(mpg ~ am + wt + qsec + hp, data = mtcars)
anova(fit1,fit2,fit3,fit4)
cbind(coef(fit3),confint(fit3,level=0.95))
p <- par(mfrow = c(2,2))
plot(fit3, which = 1:4)
par(p)
outliers <- c("Chrysler Imperial")
mtcars2 <- mtcars[!is.element(rownames(mtcars),outliers),]
fit5 <- lm(mpg ~ am + wt + qsec, data = mtcars2)
cbind(coef(fit5),confint(fit5,level=0.95))
dfbetas(fit3)
?avPlot
?avPlots
avPlots(fit3)
cookd(fit3)
plot(mpg ~ am, data = mtcars)
plot(mpg ~ am, data = mtcars, panel = panel.smooth)
plot(mpg ~ wt, data = mtcars)
plot(mpg ~ ., data = mtcars)
p <- par(mfrow = c(5,2))
plot(mpg ~ ., data = mtcars, which = 1:10)
p <- par(mfrow = c(5,2))
plot(mpg ~ ., data = mtcars, which = 1:10)
?par
p <- par(mfrow = c(5,2), mar = rep(1,10))
plot(mpg ~ ., data = mtcars, which = 1:10)
?rep
p <- par(mfrow = c(5,2), mar = 1)
plot(mpg ~ ., data = mtcars, which = 1:10)
p <- par(mfrow = c(5,2), mar = rep(1))
plot(mpg ~ ., data = mtcars, which = 1:10)
p <- par(mfrow = c(2,2))
plot(mpg ~ ., data = mtcars, which = 1:4)
p <- par(mfrow = c(5,2), mar = rep(1,4))
plot(mpg ~ ., data = mtcars, which = 1:10)
p <- par(mfrow = c(5,2), mar = rep(1,4))
plot(mpg ~ ., data = mtcars)
?plot
p <- par(mfrow = c(5,2), mar = rep(1,4))
plot(mpg ~ ., data = mtcars, main = "a")
?substitute(x)
?mtcars
plot(mpg ~ am, data = mtcars, xaxis = "Transmission")
?plot
p <- par(mfrow = c(2,2))
plot(fit3, which = 1:4)
par(p)
p <- par(mfrow = c(2,2))
plot(fit3, which = 1:4)
par(p)
?plot
p <- par(mfrow = c(2,2))
plot(fit3, which = 1:4)
?mtcars
p <- par(mfrow = c(2,2), mar = rep(1,4))
plot(mpg ~ am, data = mtcars, xlab = "Transmission")
plot(mpg ~ wt, data = mtcars, xlab = "weight (lb/1000)")
plot(mpg ~ qsec, data = mtcars, xlab = "1/4 mile time")
plot(mpg ~ hp, data = mtcars, xlab = "Gross horsepower")
p <- par(mfrow = c(2,2), mar = rep(3,4))
plot(mpg ~ am, data = mtcars, xlab = "Transmission")
plot(mpg ~ wt, data = mtcars, xlab = "weight (lb/1000)")
plot(mpg ~ qsec, data = mtcars, xlab = "1/4 mile time")
plot(mpg ~ hp, data = mtcars, xlab = "Gross horsepower")
plot(mpg ~ am, data = mtcars, xlab = "Transmission")
p <- par(mfrow = c(1,1), mar = rep(3,4))
plot(mpg ~ am, data = mtcars, xlab = "Transmission")
p <- par(mfrow = c(2,2), mar = rep(0,4))
plot(mpg ~ am, data = mtcars, xlab = "Transmission")
p <- par(mfrow = c(2,2), mar = rep(0,4))
plot(mpg ~ am, data = mtcars, main = "Transmission")
plot(mpg ~ wt, data = mtcars, xlab = "weight (lb/1000)")
plot(mpg ~ qsec, data = mtcars, xlab = "1/4 mile time")
plot(mpg ~ hp, data = mtcars, xlab = "Gross horsepower")
p <- par(mfrow = c(2,2), mar = rep(3,4))
plot(mpg ~ am, data = mtcars, main = "Transmission")
plot(mpg ~ wt, data = mtcars, main = "weight (lb/1000)")
plot(mpg ~ qsec, data = mtcars, main = "1/4 mile time")
plot(mpg ~ hp, data = mtcars, main = "Gross horsepower")
fit5 <- lm(mpg ~ am + wt + qsec, data = mtcars2)
fit6 <- lm(mpg ~ am, mtcars2)
cbind(coef(fit5),confint(fit5,level=0.95))
cbind(coef(fit6),confint(fit6,level=0.95))
?head
View(mtcars)
?mtcars
summary(fit.all)
fit1 <- lm(mpg ~  am, data = mtcars)
fit2 <- lm(mpg ~ am + wt, data = mtcars)
fit3 <- lm(mpg ~ am + wt + qsec, data = mtcars)
fit4 <- lm(mpg ~ am + wt + qsec + hp, data = mtcars)
anova(fit1,fit2,fit3,fit4)
p <- par(mfrow = c(2,2))
plot(fit3, which = 1:4)
outlierTest(fit3)
cbind(coef(fit5)[2],confint(fit5,level=0.95)[2])
cbind(coef(fit5)[2],confint(fit5,level=0.95)[2,])
confint(fit5,level=0.95)[2,]
coef(fit5)[2]
rbind(coef(fit5)[2],confint(fit5,level=0.95)[2,])
cbind(coef(fit5),confint(fit5,level=0.95))
cbind(coef(fit6),confint(fit6,level=0.95))
fit1.b <- lm(mpg ~ am, mtcars2)
fit3.b <- lm(mpg ~ am + wt + qsec, data = mtcars2)
cbind(coef(fit1.b),confint(fit1.b,level=0.95))
cbind(coef(fit3.b),confint(fit3.b,level=0.95))
?mtcars
summary(fit3.b)
install.packages("caret")
install.packages("kernlab")
install.packages("ISLR")
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
data(AlzheimerDisease)
data(AlzheimerDisease)
head(diagnosis)
adData = data.frame(diagnosis,predictors)
trainIndex = createDataPartition(diagnosis, p=0.50,list=FALSE)
training = adData[trainIndex,]
test = adData[-trainIndex,]
clear(all)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength,p=3/4)[[1]]
training = mixtures[inTrain,]
test = mixtures[-inTrain,]
str(training)
hist(training$Superplasticizer)
View(training)
set.seed(3433)
data(AlzheimerDisease)
data(AlzheimerDisease)
adData <- data.frame(diagnosis,predictors)
inTrain = createDataPartition()
inTrain = createDataPartition(adData$diagnosis, p=3/4)[[1]]
training = adData[trainIndex,]
training = adData[inTrain,]
test = adData[-inTrain,]
View(training)
training2 <- training[,58:69]
?preProcess
View(training2)
preProc <- preProcess(training2,method = "PCA")
library(caret)
preProc <- preProcess(training2,method = "pca")
trainPC <- predict(preProc,training2)
View(trainPC)
View(training2)
View(trainPC)
modelFit <- train(training$diagnosis ~.,method = "glm", data=trainPC)
modelFit <- train(training$diagnosis ~. , method = "glm", data=trainPC)
install.packages("e1071")
modelFit <- train(training$diagnosis ~. , method = "glm", data=trainPC)
View(trainPC)
modelFit1 <- train(training$diagnosis ~ PC1, method = "glm", data=trainPC)
summary(modelFit1)
testPC <- predict(preProc,training2)
test2 <- test[,58:69]
testPC <- predict(preProc,test2)
confusionMatrix(test$diagnosis,predict(modelFit1,testPC))
modelFit2 <- train(training$diagnosis ~ PC1 + PC2, method = "glm", data=trainPC)
modelFit2 <- train(training$diagnosis ~ PC1 + PC2 + PC3 + PC4 + PC5, method = "glm", data=trainPC)
confusionMatrix(test$diagnosis,predict(modelFit2,testPC))
modelFit3 <- train(training$diagnosis ~ ., method = "glm", data=trainPC)
confusionMatrix(test$diagnosis,predict(modelFit3,testPC))
preProc <- preProcess(training2,method = "pca", thresh = 0.9)
preProc$rotation
preProc <- preProcess(training2,method = "pca", thresh = 0.8)
trainPC <- predict(preProc,training2)
modelFit.PCA <- train(training$diagnosis ~ ., method = "glm", data=trainPC)
View(training)
modelFit.NPCA <- train(diagnosis ~ ., method = "glm", data=training)
confusionMatrix(test$diagnosis, predict(modelFit.NPCA,test))
confusionMatrix(test$diagnosis, predict(modelFit.PCA,test2))
confusionMatrix(test$diagnosis, predict(modelFit.PCA,testPC))
modelFit.NPCA <- train(training$diagnosis ~ ., method = "glm", data=training2)
confusionMatrix(test$diagnosis, predict(modelFit.NPCA,test))
View(trainPC)
library(AppliedPredictiveModeling)
data("segmentationOriginal")
library(caret)
View(segmentationOriginal)
training <- segmentationOriginal[Case == "Test",]
training <- segmentationOriginal[segmentationOriginal$Case == "Test",]
training <- segmentationOriginal[Case == "Train",]
training <- segmentationOriginal[segmentationOriginal$Case == "Train",]
test <- segmentationOriginal[segmentationOriginal$Case == "Test",]
seed(125)
set.seed(125)
View(test)
training <- segmentationOriginal[segmentationOriginal$Case == "Train",3:119]
test <- segmentationOriginal[segmentationOriginal$Case == "Test",3:119]
fit1 <- train(Class ~., method = "rpart", data=training)
library(rattle)
install.packages("rattle")
print(fit1$finalModel)
library(pgmm)
install.packages("pgmm")
library(pgmm)
data(olive)
View(olive)
olive = oliver[,-1]
olive = olive[,-1]
fit2 <- train(Area ~., method = "rpart", data = olive)
newdata = as.data.frame(t(colMeans(olive)))
predict(fit2, newdata=newdata)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data("SAheart")
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA <- SAheart[train,]
testSA <- SAhearrt[-train,]
testSA <- SAheart[-train,]
set.seed(13234)
View(testSA)
fit3 <- train(chd ~  age + alcohol + obesity +tobacco + typea + ldl, method = "glm", family = "binomial", data=trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
pred3 <- predict(fit3, newdata = testSA)
missClass(testSA$chd, pred3)
misclass3 <- predict(fit3, newdata=trainSA)
missClass(testSA$chd, misclass3)
data(vowel.train)
data(vowel.test)
vowel.train2 <- vowel.train[,y = as.factor(y)]
View(vowel.test)
library(dplyr)
?"dplyr"
?modify
?mutate
vowel.train2 <- mutate(vowel.train, y = as.factor(y))
View(vowel.train2)
vowel.test2 <- mutate(vowel.test, y = as.factor(y))
set.seed(33833)
fit4 <- train(y ~., data=vowel.train2, method = "rf", prox=TRUE)
?varImp
varImp(fit4)
missClass(trainSA$chd, misclass3)
## Loading and preprocessing
library(caret)
if(!file.exists("pml-training.csv")){
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",
destfile = "pml-training.csv")
}
if(!file.exists("pml-testing.csv")){
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv",
destfile = "pml-testing.csv")
}
train <- read.csv('pml-training.csv')
test <- read.csv('pml-testing.csv')
View(train)
str(train)
View(test)
train <- read.csv('pml-training.csv', na.strings = c("","NA", "#DIV/0!"))
test <- read.csv('pml-testing.csv', na.strings = c("","NA", "#DIV/0!"))
summary(train)
View(train)
train2 <- train[is.na(train$max_yaw_dumbbell),]
summary(train$Classe)
summary(train2$classe)
fit1 <- train(classe ~., method = "rpart, data = train)
fit1 <- train(classe ~., method = "rpart", data = train)
?train
# check if there any NA in any column variables of train
TRUE %in% sapply(train, function(col) {NA %in% col})
# individually inspect odd outputs by iterating over factor and character variables
# helps to see the factor levels
for (col in 1:ncol(train)) {
if(class(train[, col]) == "factor" |
class(train[, col]) == "character") {
print(unique(train[, col]))
}
}
completionStatus <- sapply(train, function(col) {!(NA %in% col)})
completionStatus
?sapply
completionStatus <- sapply(train, function(variable) {!(NA %in% variable)})
sum(completiontStatus)
sum(completionStatus)
train2 <- train[,!hasNA]
hasNA <- sapply(train, function(variable) {(NA %in% variable)})
train2 <- train[,!hasNA]
test2 <- test[,!hasNA]
str(train2)
View(test)
View(test2)
## remove row identifier
train3 <- train2[,-1]
test3 <- test2[,-1]
View(test)
train3 <- train2[,-1:6]
train3 <- train2[,-(1:6)]
View(train3)
train3 <- train2[,-(1:7)]
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
view(vowel.train)
View(vowel.train)
set.seed(33833)
library(caret)
?caret
?train
fit.rf <- train(x = vowel.train[,2:11], y = as.factor(vowel.train$y), method = "rf")
summary(fit.rf)
fit.gbm <- train(x = vowel.train[,2:11], y = as.factor(vowel.train$y), method = "gbm")
summary(fit.gbm)
?predict
pred.rf <- predict(fit.rf,vowel.test)
pred.rf
pred.gbm <- predict(fit.gbm,vowel.test)
pred.gbm
accuracy.rf <- sum(pred.rf == as.factor(vowel.test$y))/length(pred.rf)
accuracy.gbm <- sum(pred.gbm == as.factor(vowel.test$y))/length(pred.gbm)
?"gbm"
fit.gbm <- train(x = vowel.train[,2:11], y = as.factor(vowel.train$y), method = "gbm", verbose = FALSE)
pred.gbm <- predict(fit.gbm,vowel.test)
accuracy.gbm <- sum(pred.gbm == as.factor(vowel.test$y))/length(pred.gbm)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData <- data.frame(diagnosis,predictors)
inTrain <- createDataPartition(adData$diagnosis, p=3/4)[[1]]
training <- adData[inTrain,]
testing <- adData[-inTrain,]
set.seed(62533)
set.seed(62433)
?randomForest
View(training)
alz.rf <- train(diagnosis ~., data = training, method = "rf")
alz.gbm <- train(diagnosis ~., data = training, method = "gbm")
alz.lda <- train(diagnosis ~., data = training, method = "lda")
pred.alz.rf <- predict(alz.rf, testing)
pred.alz.gbm <- predict(alz.gbm, testing)
pred.alz.lda <- predict(alz.lda, testing)
comb_data <- data.frame(rf = pred.alz.rf, gbm = pred.alz.gbm, lda = pred.alz.lda, diagnosis = training$diagnosis)
set.seed(3523)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p=3/4)[[1]]
training <- concrete[inTrain,]
testing <- concrete[-inTrain,]
sed.seed(233)
set.seed(233)
model <- train(CompressiveStrength ~ ., method = 'lasso', data = training)
?plot.enet
plot.enet(model)
plot.enet(model, xvar = "penalty")
plot(model, xvar = "penalty")
plot(model)
model
?plot.enet
plot(model, xvar = "penalty")
?plot.enet
par(mfrow=c(2,2))
plot(model)
names(model)
str(model)
plot(model$finalModel, xvar = "penalty", use.color = TRUE)
plot(model$finalModel, xvar = "penalty", use.color = TRUE)
plot(model$finalModel, xvar = "penalty", use.color = TRUE)
plot(model$finalModel, xvar = "penalty", use.color = TRUE)
str(model)
par(mfrow=c(1,1))
plot(model$finalModel, xvar = "penalty", use.color = TRUE)
dat = read.csv("gaData.csv")
training = dat[year(dat$date) == 2011,]
tstrain = ts(training$visitsTumblr)
remdata = dat[year(dat$date) > 2011,]
tsrem = ts(remdata$visitsTumblr)
bats = bats(tstrain)
install.packages("lubridate")
dat = read.csv("gaData.csv")
training = dat[year(dat$date) == 2011,]
tstrain = ts(training$visitsTumblr)
remdata = dat[year(dat$date) > 2011,]
tsrem = ts(remdata$visitsTumblr)
model = bats(tstrain)
install.packages("forecast")
library(forecast)
dat = read.csv("gaData.csv")
training = dat[year(dat$date) == 2011,]
tstrain = ts(training$visitsTumblr)
remdata = dat[year(dat$date) > 2011,]
tsrem = ts(remdata$visitsTumblr)
bats = bats(tstrain)
data <- read.csv("http://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv")
training.tblr <- data[year(data$date) < 2012,]
library(lubridate)
training.tblr <- data[year(data$date) < 2012,]
testing.tblr <- data[year(data$date) > 2011,]
fit.bats <- bats(training.tblr)
View(training.tblr)
View(data)
View(visistsTumblr ~ date, data = training.tblr)
?bats
View(visistsTumblr, data = training.tblr)
fit.bats <- bats(visistsTumblr, data = training.tblr)
fit.bats <- bats(training.tblr$visistsTumblr)
fit.bats <- bats(training.tblr)
fit.bats <- bats(training.tblr[,3])
fit.bats
pred <- forecast(bats, h=length(testing.tblr),level=c(95))
?forecast
dat = read.csv("~/datasciencecoursera/Courses/PracticalMachineLearning/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
dat = read.csv("http://d396qusza40orc.cloudfront.net/predmachlearn/gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
mod <- bats(tstrain)
fcast <- forecast.bats(mod, level=95, h=nrow(testing))
acc <- accuracy(fcast, testing$visitsTumblr)
install.packages("devtools")
install.packages("devtools")
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='jbeaulieu',
token='911D765E9523D0456380EAF3434B870F',
secret='<SECRET>')
shinyapps::setAccountInfo(name='jbeaulieu', token='911D765E9523D0456380EAF3434B870F', secret='GYdsK376dFFWVi96JbaK7ZIf0s2F19feHawSIX06')
library(shinyapps)
shinyapps::deployApp('path/to/your/app')
install.packages("manipulate")
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0,s)
}
manipulate(myPlot, s = slide(0,2,step = 0.1))
manipulate(myPlot, s = slider(0,2,step = 0.1))
manipulate(myPlot(s), s = slider(0,2,step = 0.1))
manipulate(myPlot(s), slider(0,2,step = 0.1))
manipulate(myPlot(s), x.s = slider(0,2,step = 0.1))
manipulate(myPlot(s), slider = x(0,2,step = 0.1))
manipulate(myPlot(s), s = slider(0,2,step = 0.1))
data("airquality")
d <- data.frame(airquality, stringsAsFactors = FALSE) print(d)
d <- data.frame(airquality, stringsAsFactors = FALSE); print(d)
dTable(airquality, sPaginationType = "full_numbers")
shinyUI(pageWithSidebar(
headerPanel("Example plot"),
sidebarPanel(
sliderInput('mu', 'Guess at the mu', value = 70, min = 60, max = 80, step = 0.05,)
),
mainPanel(
plotOutput('newHist')
)
))
library(shinyapps)
shinyUI(pageWithSidebar(
headerPanel("Example plot"),
sidebarPanel(
sliderInput('mu', 'Guess at the mu', value = 70, min = 60, max = 80, step = 0.05,)
),
mainPanel(
plotOutput('newHist')
)
))
require(devtools)
install_github("slidify","ramnathv")
install_github("ramnathv/slidify")
install_github("ramnathv/slidify")
install_github('ramnathv/slidify')
library(slidify)
setwd("C:/Users/Julien/Google Drive/15 - coursera/dataproducts/project/slidify")
author("oscarSlidify")
slidify('index.Rmd')
library(knitr)
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
logo        : Academy_Award_trophy.png
slidify('index.Rmd')
browseURL('index.html')
slidify('index.Rmd')
browseURL('index.html')
